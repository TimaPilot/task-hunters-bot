import discord
from discord.ext import commands
from discord.ui import View, Button
from dotenv import load_dotenv
import os
import datetime
from order_logger import (
    save_order_to_json,
    update_order_status_by_id,
    get_order_by_id,
    get_orders_by_user,
    load_orders
)
import traceback

def log_error(error_text):
    with open("error_log.txt", "a", encoding="utf-8") as f:
        f.write(error_text + "\n")

intents = discord.Intents.default()
intents.message_content = True
intents.members = True

bot = commands.Bot(command_prefix="!", intents=intents)

 # üåç Reverse mapping: –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∫–ª—é—á–∞ —Ä–µ—Å—É—Ä—Å—É
resource_reverse = {
"ü™® –ö–∞–º—ñ–Ω—å": "stone",
"üå≤ –î–µ—Ä–µ–≤–æ": "wood",          
"üêü –†–∏–±–∞": "fish",          
"üçÑ –ì—Ä–∏–±–∏": "mushrooms",
"üß¥ –ú–∏—é—á—ñ –∑–∞—Å–æ–±–∏": "cleaner"            
}

# ‚è±Ô∏è –û—Ä—ñ—î–Ω—Ç–æ–≤–Ω–∏–π —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ä–µ—Å—É—Ä—Å—É
estimated_times = {
"stone": "30‚Äì60 —Ö–≤",
"wood": "15‚Äì20 —Ö–≤",
"fish": "25‚Äì35 —Ö–≤",
"mushrooms": "30 —Ö–≤",
"cleaner": "20‚Äì25 —Ö–≤"
}


@bot.event
async def on_ready():
    print(f"‚úÖ Logged in as {bot.user}")
    bot.add_view(ResourceButtonsView())  # keep view alive after restart

@bot.command()
async def start(ctx):
    class OrderButtonView(View):
        def __init__(self):
            super().__init__(timeout=None)
            self.add_item(Button(label="–ó–∞–º–æ–≤–∏—Ç–∏ –ø–æ—Å–ª—É–≥—É", style=discord.ButtonStyle.primary, custom_id="order_service"))

    await ctx.send("–ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –∑—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:", view=OrderButtonView())

@bot.command(name="–º–æ—ó–∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")
async def my_orders(ctx):
    user_id = ctx.author.id
    orders = get_orders_by_user(user_id)

    if not orders:
        await ctx.send("üîç –£ –≤–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å.")
        return

    message = "üì¶ **–í–∞—à—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:**\n"
    for order in orders[-10:]:
        ts = order['timestamp']
        if isinstance(ts, str):
            ts = datetime.datetime.fromisoformat(ts)
        message += f"- `{ts}` {order['details']} ‚Äî **{order['status']}**\n"

    await ctx.send(message)

class ResourceButtonsView(View):
    def __init__(self):
        super().__init__(timeout=None)
        self.add_item(Button(label="ü™® –ö–∞–º—ñ–Ω—å", style=discord.ButtonStyle.secondary, custom_id="stone"))
        self.add_item(Button(label="üå≤ –î–µ—Ä–µ–≤–æ", style=discord.ButtonStyle.secondary, custom_id="wood"))
        self.add_item(Button(label="üêü –†–∏–±–∞", style=discord.ButtonStyle.secondary, custom_id="fish"))
        self.add_item(Button(label="üçÑ –ì—Ä–∏–±–∏", style=discord.ButtonStyle.secondary, custom_id="mushrooms"))
        self.add_item(Button(label="üß¥ –ú–∏—é—á—ñ –∑–∞—Å–æ–±–∏", style=discord.ButtonStyle.secondary, custom_id="cleaner"))

class OrderProgressView(View):
    def __init__(self, customer: discord.User, resource: str, order_id: int, stage: str = "new"):
        super().__init__(timeout=None)
        self.customer = customer
        self.resource = resource
        self.order_id = order_id

        if stage == "new":
            self.add_item(Button(label="‚úÖ –ü—Ä–∏–π–Ω—è—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", style=discord.ButtonStyle.success, custom_id=f"accept_order_{order_id}"))

        elif stage == "accepted":
            self.add_item(Button(label="üì¶ –ó—ñ–±—Ä–∞–Ω–æ", style=discord.ButtonStyle.primary, custom_id=f"ready_{order_id}"))

        elif stage == "ready":
            self.add_item(Button(label="üèÅ –í–∏–∫–æ–Ω–∞–Ω–æ", style=discord.ButtonStyle.secondary, custom_id=f"finish_{order_id}"))

@bot.event
async def on_interaction(interaction: discord.Interaction):
    if interaction.type == discord.InteractionType.component:
        user = interaction.user
        cid = interaction.data["custom_id"]

        if cid == "order_service":
            await interaction.response.send_message("üõí –í–∏–±–µ—Ä–∏ —Ä–µ—Å—É—Ä—Å –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:", view=ResourceButtonsView(), ephemeral=True)

        elif cid in ["stone", "wood", "fish", "mushrooms", "cleaner"]:
            resource_names = {
                "stone": "ü™® –ö–∞–º—ñ–Ω—å",
                "wood": "üå≤ –î–µ—Ä–µ–≤–æ",
                "fish": "üêü –†–∏–±–∞",
                "mushrooms": "üçÑ –ì—Ä–∏–±–∏",
                "cleaner": "üß¥ –ú–∏—é—á—ñ –∑–∞—Å–æ–±–∏"
            }
            selected = resource_names[cid]

            order_data = {
                "customer": user.name,
                "customer_id": user.id,
                "type": "–î–æ—Å—Ç–∞–≤–∫–∞ —Ä–µ—Å—É—Ä—Å—É",
                "details": selected,
                "hunter": None,
                "status": "–û—á—ñ–∫—É—î"
            }
            order_id = save_order_to_json(order_data)
            channel = discord.utils.get(interaction.guild.text_channels, name="‚úÖ-–≤–∏–∫–æ–Ω–∞–Ω–Ω—è-–∑–∞–º–æ–≤–ª–µ–Ω—å")
            if channel:
                await channel.send(
                    f"üÜï –ù–∞–¥—ñ–π—à–ª–æ –Ω–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞ **{selected}** –≤—ñ–¥ {user.mention}",
                    view=OrderProgressView(user, cid, order_id, stage="new")
                )
            await interaction.response.send_message(
                f"üì® –í–∞—à –∑–∞–ø–∏—Ç –Ω–∞ **{selected}** —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ. –û—á—ñ–∫—É–π—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.", ephemeral=True
            )

        elif cid.startswith("accept_order_"):
            order_id = int(cid.replace("accept_order_", ""))
            order = get_order_by_id(order_id)
            resource = order["details"]
            hunter = user

            try:
                customer = interaction.message.mentions[0]
            except IndexError:
                await interaction.response.send_message("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∑–∞–º–æ–≤–Ω–∏–∫–∞.", ephemeral=True)
                return

            await interaction.response.edit_message(
                content=f"üîî –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞ **{resource}** –ø—Ä–∏–π–Ω—è—Ç–æ –º–∏—Å–ª–∏–≤—Ü–µ–º {hunter.mention}!",
                view=OrderProgressView(customer, cid.split("_")[2], order_id, stage="accepted")
            )

            update_order_status_by_id(order_id, "–í —Ä–æ–±–æ—Ç—ñ", hunter_name=hunter.name)
            notify_channel = discord.utils.get(interaction.guild.text_channels, name="üìù-–∑—Ä–æ–±–∏—Ç–∏-–∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")
            if notify_channel:
                resource_key = resource_reverse.get(resource, "unknown")
                eta = estimated_times.get(resource_key, "20‚Äì30 —Ö–≤")

                await notify_channel.send(
                    f"{customer.mention}, –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞ {resource} –ø—Ä–∏–π–Ω—è–≤ {hunter.mention}! üïí –û—Ä—ñ—î–Ω—Ç–æ–≤–Ω–∏–π —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è ‚Äî {eta}!"
                )


        elif cid.startswith("ready_"):
            order_id = int(cid.replace("ready_", ""))
            order = get_order_by_id(order_id)
            customer_id = order["customer_id"]

            try:
                customer = await interaction.guild.fetch_member(customer_id)

                notify_channel = discord.utils.get(interaction.guild.text_channels, name="üìÆ-–∑—Ä–æ–±–∏—Ç–∏-–∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")
                if notify_channel:
                    if "–∫–∞–º—ñ–Ω—å" in order["details"].lower():
                        await notify_channel.send(
                            f"{customer.mention}, ü™® –í–∞—à –∫–∞–º—ñ–Ω—å –≥–æ—Ç–æ–≤–∏–π! –ú–∏—Å–ª–∏–≤–µ—Ü—å –æ—á—ñ–∫—É—î –í–∞—Å –Ω–∞ –∫–∞—Ä'—î—Ä—ñ.\nüí° –ó–≤—ñ–ª—å–Ω—ñ—Ç—å —ñ–Ω–≤–µ–Ω—Ç–∞—Ä –∑–∞–∑–¥–∞–ª–µ–≥—ñ–¥—å ‚Äî –±—É–¥–µ –≤–∞–∂–∫–æ!"
                        )
                    else:
                        await notify_channel.send(
                            f"{customer.mention}, üì¶ –í–∞—à {order['details']} –≤–∂–µ –≤ —Ä—é–∫–∑–∞–∫—É –º–∏—Å–ª–∏–≤—Ü—è! üìç –í–∞–º–∏ –∑–∞—Ä–∞–∑ –∑–≤‚Äô—è–∂—É—Ç—å—Å—è –¥–ª—è —É–∑–≥–æ–¥–∂–µ–Ω–Ω—è –º—ñ—Å—Ü—è –∑—É—Å—Ç—Ä—ñ—á—ñ"
                        )

                await interaction.edit_original_response(
                    content="‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑—ñ–±—Ä–∞–Ω–µ.",
                    view=OrderProgressView(customer, "resource", order_id, stage="ready")
                )

            except Exception as e:
                log_error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —É ready_: {str(e)}")
                log_error(traceback.format_exc())


        elif cid.startswith("finish_"):
            order_id = int(cid.replace("finish_", ""))
            order = get_order_by_id(order_id)
            customer_id = order["customer_id"]

            try:
                customer = await interaction.guild.fetch_member(customer_id)
            except:
                await interaction.response.send_message("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∑–∞–º–æ–≤–Ω–∏–∫–∞.", ephemeral=True)
                return

            update_order_status_by_id(order_id, "–í–∏–∫–æ–Ω–∞–Ω–æ", hunter_name=user.name)

            await interaction.response.edit_message(content="üèÅ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ.", view=None)

            notify_channel = discord.utils.get(interaction.guild.text_channels, name="üìù-–∑—Ä–æ–±–∏—Ç–∏-–∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")
            if notify_channel:
                await notify_channel.send(f"{customer.mention}, –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –±—É–ª–æ –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ **–≤–∏–∫–æ–Ω–∞–Ω–µ**. –î—è–∫—É—î–º–æ, —â–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–ª–∏—Å—å –Ω–∞—à–∏–º–∏ –ø–æ—Å–ª—É–≥–∞–º–∏!")
                await notify_channel.send(f"üí¨ –ë—É–¥–µ–º–æ —Ä–∞–¥—ñ –±–∞—á–∏—Ç–∏ –í–∞—à –≤—ñ–¥–≥—É–∫ –≤ –∫–∞–Ω–∞–ª—ñ <#1356362829099303160>!")

load_dotenv()
TOKEN = os.getenv("DISCORD_TOKEN")
bot.run(TOKEN)
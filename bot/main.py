import discord
from discord.ext import commands
from discord.ui import View, Button
from dotenv import load_dotenv
import os
import asyncio
from db_logger import (
    save_order_to_db,
    get_orders_by_user,
    get_order_by_id,
    update_order_status_by_id,
    init_db
)
import datetime

intents = discord.Intents.default()
intents.message_content = True

bot = commands.Bot(command_prefix="!", intents=intents)

@bot.event
async def on_ready():
    print(f"‚úÖ Logged in as {bot.user}")

@bot.command()
async def start(ctx):
    class OrderButtonView(View):
        def __init__(self):
            super().__init__(timeout=None)
            self.add_item(Button(label="–ó–∞–º–æ–≤–∏—Ç–∏ –ø–æ—Å–ª—É–≥—É", style=discord.ButtonStyle.primary, custom_id="order_service"))

    await ctx.send("–ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –∑—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:", view=OrderButtonView())

@bot.command(name="–º–æ—ó–∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")
async def my_orders(ctx):
    user_id = ctx.author.id
    orders = await get_orders_by_user(user_id)

    if not orders:
        await ctx.send("üîç –£ –≤–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å.")
        return

    message = "üì¶ **–í–∞—à—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:**\n"
    for order in orders:
        ts = order['timestamp']
        if isinstance(ts, str):
            ts = datetime.datetime.fromisoformat(ts)
        message += f"- `{ts.strftime('%Y-%m-%d %H:%M')}` {order['details']} ‚Äî **{order['status']}**\n"

    await ctx.send(message)

@bot.event
async def on_interaction(interaction: discord.Interaction):
    if interaction.type == discord.InteractionType.component:
        user = interaction.user
        custom_id = interaction.data["custom_id"]

        if custom_id == "order_service":
            await interaction.response.send_message("üõçÔ∏è –í–∏–±–µ—Ä–∏ —Ä–µ—Å—É—Ä—Å –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:", view=ResourceButtonsView(), ephemeral=True)

        elif custom_id in ["stone", "wood", "fish", "mushrooms", "cleaner"]:
            resource_names = {
                "stone": "ü™® –ö–∞–º—ñ–Ω—å",
                "wood": "üå≤ –î–µ—Ä–µ–≤–æ",
                "fish": "üêü –†–∏–±–∞",
                "mushrooms": "üçÑ –ì—Ä–∏–±–∏",
                "cleaner": "üß¥ –ú–∏—é—á—ñ –∑–∞—Å–æ–±–∏"
            }
            selected = resource_names[custom_id]
            order_data = {
                "customer": user.name,
                "customer_id": user.id,
                "type": "–î–æ—Å—Ç–∞–≤–∫–∞ —Ä–µ—Å—É—Ä—Å—É",
                "details": selected,
                "hunter": None,
                "status": "–û—á—ñ–∫—É—î"
            }
            order_id = await save_order_to_db(order_data)

            hunters_channel = discord.utils.get(interaction.guild.text_channels, name="‚úÖ-–≤–∏–∫–æ–Ω–∞–Ω–Ω—è-–∑–∞–º–æ–≤–ª–µ–Ω—å")
            if not hunters_channel:
                await interaction.response.send_message("‚ùå –ö–∞–Ω–∞–ª `‚úÖ-–≤–∏–∫–æ–Ω–∞–Ω–Ω—è-–∑–∞–º–æ–≤–ª–µ–Ω—å` –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", ephemeral=True)
                return

            msg = await hunters_channel.send(
                f"üÜï –ù–∞–¥—ñ–π—à–ª–æ –Ω–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞ **{selected}** –≤—ñ–¥ {user.mention}",
                view=AcceptOrderView(order_id)
            )
            await interaction.response.send_message(
                f"üì® –í–∞—à –∑–∞–ø–∏—Ç –Ω–∞ **{selected}** —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ. –û—á—ñ–∫—É–π—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.",
                ephemeral=True
            )

        elif custom_id.startswith("accept_"):
            order_id = int(custom_id.split("_")[1])
            await update_order_status_by_id(order_id, "–í —Ä–æ–±–æ—Ç—ñ", user.name)
            await interaction.response.send_message(f"üõ†Ô∏è –í–∏ –ø—Ä–∏–π–Ω—è–ª–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id}", ephemeral=True)

        elif custom_id.startswith("ready_"):
            order_id = int(custom_id.split("_")[1])
            await update_order_status_by_id(order_id, "–ì–æ—Ç–æ–≤–µ", user.name)
            await interaction.response.send_message(f"üì¶ –í–∏ –ø–æ–∑–Ω–∞—á–∏–ª–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} —è–∫ –≥–æ—Ç–æ–≤–µ", ephemeral=True)

        elif custom_id.startswith("finish_"):
            order_id = int(custom_id.split("_")[1])
            await update_order_status_by_id(order_id, "–í–∏–∫–æ–Ω–∞–Ω–æ", user.name)
            await interaction.response.send_message(f"‚úÖ –í–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id}", ephemeral=True)

class ResourceButtonsView(View):
    def __init__(self):
        super().__init__(timeout=None)
        self.add_item(Button(label="ü™® –ö–∞–º—ñ–Ω—å", style=discord.ButtonStyle.secondary, custom_id="stone"))
        self.add_item(Button(label="üå≤ –î–µ—Ä–µ–≤–æ", style=discord.ButtonStyle.secondary, custom_id="wood"))
        self.add_item(Button(label="üêü –†–∏–±–∞", style=discord.ButtonStyle.secondary, custom_id="fish"))
        self.add_item(Button(label="üçÑ –ì—Ä–∏–±–∏", style=discord.ButtonStyle.secondary, custom_id="mushrooms"))
        self.add_item(Button(label="üß¥ –ú–∏—é—á—ñ –∑–∞—Å–æ–±–∏", style=discord.ButtonStyle.secondary, custom_id="cleaner"))

class AcceptOrderView(View):
    def __init__(self, order_id):
        super().__init__(timeout=None)
        self.add_item(Button(label="‚úÖ –ü—Ä–∏–π–Ω—è—Ç–∏", style=discord.ButtonStyle.success, custom_id=f"accept_{order_id}"))
        self.add_item(Button(label="üì¶ –ì–æ—Ç–æ–≤–µ", style=discord.ButtonStyle.primary, custom_id=f"ready_{order_id}"))
        self.add_item(Button(label="üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç–∏", style=discord.ButtonStyle.secondary, custom_id=f"finish_{order_id}"))

async def main():
    load_dotenv()
    await init_db()
    TOKEN = os.getenv("DISCORD_TOKEN")
    await bot.start(TOKEN)

asyncio.run(main())
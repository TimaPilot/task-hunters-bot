import discord
from discord.ext import commands
from discord.ui import View, Button
from dotenv import load_dotenv
import os
import datetime
from db_logger import (
    save_order_to_db,
    update_order_status_by_id,
    get_order_by_id,
    get_orders_by_user,
    init_db,
    mark_order_accepted,
    mark_order_collected,
    delete_orders_by_customer,
    delete_orders_by_status
)
import traceback
OWNER_ID = 386329540353458186

intents = discord.Intents.default()
intents.message_content = True
intents.members = True

bot = commands.Bot(command_prefix="!", intents=intents)

 # üåç Reverse mapping: –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∫–ª—é—á–∞ —Ä–µ—Å—É—Ä—Å—É
resource_reverse = {
"ü™® –ö–∞–º—ñ–Ω—å": "stone",
"üå≤ –î–µ—Ä–µ–≤–æ": "wood",          
"üêü –†–∏–±–∞": "fish",          
"üçÑ –ì—Ä–∏–±–∏": "mushrooms",
"üß¥ –ú–∏—é—á—ñ –∑–∞—Å–æ–±–∏": "cleaner"            
}

# ‚è±Ô∏è –û—Ä—ñ—î–Ω—Ç–æ–≤–Ω–∏–π —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ä–µ—Å—É—Ä—Å—É
estimated_times = {
"stone": "30‚Äì60 —Ö–≤",
"wood": "15‚Äì20 —Ö–≤",
"fish": "25‚Äì35 —Ö–≤",
"mushrooms": "30 —Ö–≤",
"cleaner": "20‚Äì25 —Ö–≤"
}


@bot.event
async def on_ready():
    await init_db()
    print(f"‚úÖ Logged in as {bot.user}")
    
    try:
        synced = await bot.tree.sync()
        print(f"üîÅ Slash-–∫–æ–º–∞–Ω–¥–∏ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ: {len(synced)}")
    except Exception as e:
        print("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó —Å–ª–µ—à-–∫–æ–º–∞–Ω–¥:", e)

    bot.add_view(ResourceButtonsView())

# ==============================================
#           [–ë–ª–æ–∫: Slash –∫–æ–º–∞–Ω–¥–∞]
# ==============================================
@bot.tree.command(name="ping", description="–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –±–æ—Ç –∂–∏–≤–∏–π")
async def ping(interaction: discord.Interaction):
    if interaction.user.id != OWNER_ID: 
        await interaction.response.send_message("‚õî –¶—è –∫–æ–º–∞–Ω–¥–∞ –ª–∏—à–µ –¥–ª—è –∫–∞–ø—ñ—Ç–∞–Ω–∞!", ephemeral=True)
        return
    await interaction.response.send_message("üèì Pong! –ë–æ—Ç –∞–∫—Ç–∏–≤–Ω–∏–π.", ephemeral=True)

# ==============================================
#           [–ë–ª–æ–∫: –ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –Ω–æ–≤–µ–Ω—å–∫–∏—Ö]
# ==============================================
@bot.event
async def on_member_join(member):
    channel = bot.get_channel(1356270026688041171)  # ID —Ç–≤–æ–≥–æ –∫–∞–Ω–∞–ª—É

    image_path = os.path.join(os.path.dirname(__file__), "images", "Hello.png")
    file = discord.File(image_path, filename="Hello.png")

    embed = discord.Embed(
        title=f"üëã –í—ñ—Ç–∞—î–º–æ, {member.name}!",
        description="–Ü–Ω–≤–µ–Ω—Ç–∞—Ä —â–µ –ø–æ—Ä–æ–∂–Ω—ñ–π, –∞–ª–µ –º–∏—Å–ª–∏–≤—Ü—ñ –≤–∂–µ –≤ –¥–æ—Ä–æ–∑—ñ üéØ",
        color=0x8B4513
    )
    embed.set_image(url="attachment://Hello.png")

    await channel.send(content=member.mention, embed=embed, file=file)
    
    role = discord.utils.get(member.guild.roles, name="–ó–∞–º–æ–≤–Ω–∏–∫ üíº")

    if role:
        # –í–∏–¥–∞—î–º–æ —Ä–æ–ª—å —É—á–∞—Å–Ω–∏–∫—É
        await member.add_roles(role)
        print(f"–†–æ–ª—å '{role.name}' –≤–∏–¥–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {member.name}")
    else:
        print("–†–æ–ª—å '–ó–∞–º–æ–≤–Ω–∏–∫ üíº' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞!")


# =======================================================================
#           [–ë–ª–æ–∫: –û—á–∏—â–µ–Ω–Ω—è —á–∞—Ç—É (–∫—Ä—ñ–º –∑–∞–∫—Ä—ñ–ø–ª–µ–Ω–∏—Ö –ø–æ–≤—ñ–¥.)]
# =======================================================================
@bot.command()
@commands.has_permissions(manage_messages=True)
async def clear(ctx):
    # –û—á–∏—â–∞—î–º–æ –≤–µ—Å—å —á–∞—Ç, –∞–ª–µ –∑–∞–ª–∏—à–∞—î–º–æ –∑–∞–∫—Ä—ñ–ø–ª–µ–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await ctx.channel.purge(check=lambda msg: not msg.pinned)
    await ctx.send("üßπ –ß–∞—Ç –æ—á–∏—â–µ–Ω–æ! –ó–∞–∫—Ä—ñ–ø–ª–µ–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞–ª–∏—à–∏–ª–∏—Å—å.", delete_after=5)


# ==============================================
#           [–ë–ª–æ–∫: –û—á–∏—â–µ–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö]
# ==============================================
@bot.command(name="–æ—á–∏—Å—Ç–∏—Ç–∏_–∑–∞–º–æ–≤–ª–µ–Ω–Ω—è_–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
async def clear_orders_by_user(ctx, member: discord.Member):
    if ctx.author.id != 386329540353458186:
        await ctx.send("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –Ω–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return

    await delete_orders_by_customer(member.id)
    await ctx.send(f"üßπ –í–∏–¥–∞–ª–µ–Ω–æ –≤—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {member.mention}.")

@bot.command(name="–æ—á–∏—Å—Ç–∏—Ç–∏_–∑–∞_—Å—Ç–∞—Ç—É—Å–æ–º")
async def clear_orders_by_status(ctx, *, status: str):
    if ctx.author.id != 386329540353458186:
        await ctx.send("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –Ω–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return

    await delete_orders_by_status(status)
    await ctx.send(f"üßπ –í–∏–¥–∞–ª–µ–Ω–æ –≤—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º: **{status}**.")

# ==============================================
#           [–ë–ª–æ–∫: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞]
# ==============================================
@bot.command(name="–º–æ—ó–∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")
async def my_orders(ctx):
    user_id = ctx.author.id
    orders = await get_orders_by_user(user_id)

    if not orders:
        await ctx.send("üîç –£ –≤–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å.")
        return

    message = "üì¶ **–í–∞—à—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:**\n"
    for order in orders[-10:]:
        ts = order['timestamp']
        if isinstance(ts, str):
            ts = datetime.datetime.fromisoformat(ts)

        formatted_ts = ts.strftime("%Y-%m-%d %H:%M")  # —Ñ–æ—Ä–º–∞—Ç –≤–∏–≤–æ–¥—É —á–∞—Å—É
        message += f"- `{formatted_ts}` {order['details']} ‚Äî **{order['status']}**\n"

    await ctx.send(message)

# ==============================================
#           [–ë–ª–æ–∫: –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è]
# ==============================================
@bot.command()
async def start(ctx):
    class OrderButtonView(View):
        def __init__(self):
            super().__init__(timeout=None)
            self.add_item(Button(label="–ó–∞–º–æ–≤–∏—Ç–∏ –ø–æ—Å–ª—É–≥—É", style=discord.ButtonStyle.primary, custom_id="order_service"))

    await ctx.send("–ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –∑—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:", view=OrderButtonView())

class ResourceButtonsView(View):
    def __init__(self):
        super().__init__(timeout=None)
        self.add_item(Button(label="ü™® –ö–∞–º—ñ–Ω—å", style=discord.ButtonStyle.secondary, custom_id="stone"))
        self.add_item(Button(label="üå≤ –î–µ—Ä–µ–≤–æ", style=discord.ButtonStyle.secondary, custom_id="wood"))
        self.add_item(Button(label="üêü –†–∏–±–∞", style=discord.ButtonStyle.secondary, custom_id="fish"))
        self.add_item(Button(label="üçÑ –ì—Ä–∏–±–∏", style=discord.ButtonStyle.secondary, custom_id="mushrooms"))
        self.add_item(Button(label="üß¥ –ú–∏—é—á—ñ –∑–∞—Å–æ–±–∏", style=discord.ButtonStyle.secondary, custom_id="cleaner"))

class OrderProgressView(View):
    def __init__(self, customer: discord.User, resource: str, order_id: int, stage: str = "new"):
        super().__init__(timeout=None)
        self.customer = customer
        self.resource = resource
        self.order_id = order_id

        if stage == "new":
            self.add_item(Button(label="‚úÖ –ü—Ä–∏–π–Ω—è—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", style=discord.ButtonStyle.success, custom_id=f"accept_order_{order_id}"))

        elif stage == "accepted":
            self.add_item(Button(label="üì¶ –ó—ñ–±—Ä–∞–Ω–æ", style=discord.ButtonStyle.primary, custom_id=f"ready_{order_id}"))

        elif stage == "ready":
            self.add_item(Button(label="‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ", style=discord.ButtonStyle.secondary, custom_id=f"finish_{order_id}"))

# ==============================================
#           [–ë–ª–æ–∫: on_interaction]
# ==============================================
@bot.event
async def on_interaction(interaction: discord.Interaction):
    if interaction.type == discord.InteractionType.component:
        user = interaction.user
        cid = interaction.data["custom_id"]

        if cid == "order_service":
            await interaction.response.send_message("üõí –í–∏–±–µ—Ä–∏ —Ä–µ—Å—É—Ä—Å –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:", view=ResourceButtonsView(), ephemeral=False)

        elif cid in ["stone", "wood", "fish", "mushrooms", "cleaner"]:
            resource_names = {
                "stone": "ü™® –ö–∞–º—ñ–Ω—å",
                "wood": "üå≤ –î–µ—Ä–µ–≤–æ",
                "fish": "üêü –†–∏–±–∞",
                "mushrooms": "üçÑ –ì—Ä–∏–±–∏",
                "cleaner": "üß¥ –ú–∏—é—á—ñ –∑–∞—Å–æ–±–∏"
            }
            selected = resource_names[cid]

            order_data = {
                "customer": user.name,
                "customer_id": user.id,
                "details": selected,
                "hunter": None,
                "status": "–û—á—ñ–∫—É—î"
            }

            order_id = await save_order_to_db(order_data)
            await interaction.message.delete()
            channel = discord.utils.get(interaction.guild.text_channels, name="‚úÖ-–≤–∏–∫–æ–Ω–∞–Ω–Ω—è-–∑–∞–º–æ–≤–ª–µ–Ω—å")
            if channel:
                await channel.send(
                    f"üÜï –ù–∞–¥—ñ–π—à–ª–æ –Ω–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞ **{selected}** –≤—ñ–¥ {user.mention}",
                    view=OrderProgressView(user, cid, order_id, stage="new")
                )
            await interaction.response.send_message(
                f"üì® –í–∞—à –∑–∞–ø–∏—Ç –Ω–∞ **{selected}** —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ. –û—á—ñ–∫—É–π—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.", ephemeral=True
            )

        elif cid.startswith("accept_order_"):
            order_id = int(cid.replace("accept_order_", ""))
            order = await get_order_by_id(order_id)
            resource = order["details"]
            hunter = user

            try:
                customer = interaction.message.mentions[0]
            except IndexError:
                await interaction.response.send_message("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∑–∞–º–æ–≤–Ω–∏–∫–∞.", ephemeral=True)
                return

            await interaction.response.edit_message(
                content=f"üîî –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞ **{resource}** –ø—Ä–∏–π–Ω—è—Ç–æ –º–∏—Å–ª–∏–≤—Ü–µ–º {hunter.mention}!",
                view=OrderProgressView(customer, cid.split("_")[2], order_id, stage="accepted")
            )

            await mark_order_accepted(order_id, hunter.name)
            notify_channel = discord.utils.get(interaction.guild.text_channels, name="üìù-–∑—Ä–æ–±–∏—Ç–∏-–∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")
            if notify_channel:
                resource_key = resource_reverse.get(resource, "unknown")
                eta = estimated_times.get(resource_key, "20‚Äì30 —Ö–≤")

                await notify_channel.send(
                    f"{customer.mention}, –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞ **{resource}** –ø—Ä–∏–π–Ω—è–≤ {hunter.mention}! üïí –û—Ä—ñ—î–Ω—Ç–æ–≤–Ω–∏–π —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è ‚Äî {eta}!"
                )


        elif cid.startswith("ready_"):
            order_id = int(cid.replace("ready_", ""))
            order = await get_order_by_id(order_id)
            customer_id = order["customer_id"]
            customer = await interaction.guild.fetch_member(customer_id)
            resource = order["details"]
            resource_key = resource_reverse.get(resource, "unknown")

            await mark_order_collected(order_id)

            notify_channel = discord.utils.get(
                interaction.guild.text_channels,
                name="üìù-–∑—Ä–æ–±–∏—Ç–∏-–∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"
            )

            # üì® –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–Ω–∏–∫—É
            if notify_channel:
                if "–∫–∞–º—ñ–Ω—å" in resource.lower():
                    await notify_channel.send(
                        f"{customer.mention}, ü™® –í–∞—à **–∫–∞–º—ñ–Ω—å** –≥–æ—Ç–æ–≤–∏–π! –ú–∏—Å–ª–∏–≤–µ—Ü—å –æ—á—ñ–∫—É—î –í–∞—Å –Ω–∞ –∫–∞—Ä'—î—Ä—ñ.\nüí° –ó–≤—ñ–ª—å–Ω—ñ—Ç—å —ñ–Ω–≤–µ–Ω—Ç–∞—Ä –∑–∞–∑–¥–∞–ª–µ–≥—ñ–¥—å ‚Äî –±—É–¥–µ –≤–∞–∂–∫–æ!"
                    )
                else:
                    await notify_channel.send(
                        f"{customer.mention}, üì¶ –í–∞—à **{resource}** –≤–∂–µ –≤ —Ä—é–∫–∑–∞–∫—É –º–∏—Å–ª–∏–≤—Ü—è! üìç–ó –í–∞–º–∏ –∑–∞—Ä–∞–∑ –∑–≤‚Äô—è–∂—É—Ç—å—Å—è –¥–ª—è —É–∑–≥–æ–¥–∂–µ–Ω–Ω—è –º—ñ—Å—Ü—è –∑—É—Å—Ç—Ä—ñ—á—ñ"
                    )

            # üõ†Ô∏è –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–æ—é
            await interaction.response.edit_message(
                content="üì¶ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑—ñ–±—Ä–∞–Ω–µ! –ó–∞–º–æ–≤–Ω–∏–∫—É –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.",
                view=OrderProgressView(customer, resource_key, order_id, stage="ready")
            )


        elif cid.startswith("finish_"):
            if interaction.user.bot:
                return

            order_id = int(cid.replace("finish_", ""))
            order = await get_order_by_id(order_id)
            customer_id = order["customer_id"]
            customer = await interaction.guild.fetch_member(customer_id)

            # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å
            await update_order_status_by_id(order_id, "–í–∏–∫–æ–Ω–∞–Ω–æ", hunter_name=user.name)

            # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —Ç–æ–º—É –∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ
            await interaction.response.edit_message(
                content="‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ.",
                view=None
            )

            # –ù–∞–¥—ñ—à–ª–µ–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤ –∑–∞–≥–∞–ª—å–Ω–∏–π –∫–∞–Ω–∞–ª
            notify_channel = discord.utils.get(interaction.guild.text_channels, name="üìù-–∑—Ä–æ–±–∏—Ç–∏-–∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")
            if notify_channel:
                await notify_channel.send(
                    f"{customer.mention}, –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –±—É–ª–æ –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ **–≤–∏–∫–æ–Ω–∞–Ω–µ**. –î—è–∫—É—î–º–æ, —â–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–ª–∏—Å—å –Ω–∞—à–∏–º–∏ –ø–æ—Å–ª—É–≥–∞–º–∏! ü§é"
                )
                await notify_channel.send(
                    "üí¨ –ë—É–¥–µ–º–æ —Ä–∞–¥—ñ –±–∞—á–∏—Ç–∏ –í–∞—à –≤—ñ–¥–≥—É–∫ –≤ –∫–∞–Ω–∞–ª—ñ <#1356362829099303160>!"
                )

load_dotenv()
TOKEN = os.getenv("DISCORD_TOKEN")
bot.run(TOKEN)
